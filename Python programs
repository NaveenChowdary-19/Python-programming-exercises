

R = 4

C = 4

  
# Function to print  
# the required traversal 

def counterClockspiralPrint(m, n, arr) : 

    k = 0; l = 0

      

    # k - starting row index 

    # m - ending row index 

    # l - starting column index 

    # n - ending column index 

    # i - iterator  

  

    # initialize the count 

    cnt = 0

  

    # total number of  

    # elements in matrix 

    total = m * n 

  

    while (k < m and l < n) : 

        if (cnt == total) : 

            break

  

        # Print the first column  

        # from the remaining columns  

        for i in range(k, m) : 

            print(arr[i][l], end = " ") 

            cnt += 1

          

        l += 1

  

        if (cnt == total) : 

            break

  

        # Print the last row from 

        # the remaining rows  

        for i in range (l, n) : 

            print( arr[m - 1][i], end = " ") 

            cnt += 1

          

        m -= 1

          

        if (cnt == total) : 

            break

  

        # Print the last column   

        # from the remaining columns  

        if (k < m) : 

            for i in range(m - 1, k - 1, -1) : 

                print(arr[i][n - 1], end = " ") 

                cnt += 1

            n -= 1

  

        if (cnt == total) : 

            break

  

        # Print the first row  

        # from the remaining rows  

        if (l < n) : 

            for i in range(n - 1, l - 1, -1) : 

                print( arr[k][i], end = " ") 

                cnt += 1

                  

            k += 1

              

  
# Driver Code 

arr = [ [ 1, 2, 3, 4 ], 

        [ 5, 6, 7, 8 ], 

        [ 9, 10, 11, 12 ], 

        [ 13, 14, 15, 16 ] ] 

          
counterClockspiralPrint(R, C, arr) 


--------------------------------------------

# A basic code for matrix input from user 

R = int(input("Enter the number of rows:")) 
C = int(input("Enter the number of columns:")) 

# Initialize matrix 
matrix = [] 
print("Enter the entries rowwise:") 

# For user input 
for i in range(R):		 # A for loop for row entries 
	a =[] 
	for j in range(C):	 # A for loop for column entries 
		a.append(int(input())) 
	matrix.append(a) 

# For printing the matrix 
for i in range(R): 
	for j in range(C): 
		print(matrix[i][j], end = " ") 
	print() 

------------------------------

# one-liner logic to take input for rows and columns 
mat = [[int(input()) for x in range (C)] for y in range(R)] 

-----------------

Dictionary Methods
METHODS	DESCRIPTION
copy()	They copy() method returns a shallow copy of the dictionary.
clear()	The clear() method removes all items from the dictionary.
pop()	Removes and returns an element from a dictionary having the given key.
popitem()	Removes the arbitrary key-value pair from the dictionary and returns it as tuple.
get()	It is a conventional method to access a value for a key.
dictionary_name.values()	returns a list of all the values available in a given dictionary.
str()	Produces a printable string representation of a dictionary.
update()	Adds dictionary dict2’s key-values pairs to dict
setdefault()	Set dict[key]=default if key is not already in dict
keys()	Returns list of dictionary dict’s keys
items()	Returns a list of dict’s (key, value) tuple pairs
has_key()	Returns true if key in dictionary dict, false otherwise
fromkeys()	Create a new dictionary with keys from seq and values set to value.
type()	Returns the type of the passed variable.
cmp()	Compares elements of both dict.

------------------------------
